// Initialize Firebase
var config = {
    apiKey: "AIzaSyAGwzKwiG8kSciVcjK3MrMEApuyaTsiBlQ",
    authDomain: "soccer-push.firebaseapp.com",
    databaseURL: "https://soccer-push.firebaseio.com",
    projectId: "soccer-push",
    storageBucket: "soccer-push.appspot.com",
    messagingSenderId: "1038029453494"
};
firebase.initializeApp(config);

// браузер поддерживает уведомления
if (
    'Notification' in window &&
    'serviceWorker' in navigator &&
    'localStorage' in window &&
    'fetch' in window &&
    'postMessage' in window
) {
    window.localStorage.removeItem("webpush")
    var messaging = firebase.messaging();

    $(function(){
        // пользователь уже разрешил получение уведомлений
        // подписываем на уведомления если ещё не подписали
        var sentFirebaseMessagingToken = window.localStorage.getItem('sentFirebaseMessagingToken');
        if (Notification.permission === 'granted' && typeof(sentFirebaseMessagingToken) === 'string' && sentFirebaseMessagingToken.length>0) {
            $('#subscribe-web-push').css('display','none')
            $('#unsubscribe-web-push').css('display','block')
            //webpush_subscribe();
        }else{
            $('#subscribe-web-push').css('display','block')
            $('#unsubscribe-web-push').css('display','none')
        }
        //if(!$('body').hasClass('logged-in')){
            var unsubscribed = window.localStorage.getItem('push_disabled');
            var unsubscribed_int = unsubscribed === null ? 0 : parseInt(unsubscribed);
            if($('#subscribe-web-push').length == 0 && unsubscribed_int == 0){
                webpush_subscribe();
            }
        //}

        // по клику, запрашиваем у пользователя разрешение на уведомления
        // и подписываем его
        $('#subscribe-web-push').on('click', function () {
            webpush_subscribe();
        });
        $('#unsubscribe-web-push').on('click', function () {
            webpush_unsubscribe();
        });

        function webpush_subscribe() {
            // запрашиваем разрешение на получение уведомлений
            messaging.requestPermission()
                .then(function (result) {
                    if (result === 'denied') {
                        console.log('Permission wasn\'t granted. Allow a retry.');
                        return;
                    }
                    if (result === 'default') {
                        window.localStorage.setItem('push_disabled',1);
                        return;
                    }
                    // получаем ID устройства
                    messaging.getToken()
                        .then(function (currentToken) {
                            console.log(currentToken);

                            if (currentToken) {
                                sendTokenToServer(currentToken);
                                $('#subscribe-web-push').css('display','none');
                                $('#unsubscribe-web-push').css('display','block');
                            } else {
                                console.warn('Не удалось получить токен.');
                                setTokenSentToServer(false);
                            }
                            window.localStorage.setItem('push_disabled',0)
                        })
                        .catch(function (err) {
                            console.warn('При получении токена произошла ошибка.', err);
                            setTokenSentToServer(false);
                        });
                }).catch(function (err) {
                    if($('#subscribe-web-push').length > 0){
                        alert("Снимите запрет на отправку уведомлений в браузере");
                    }
                    //window.localStorage.setItem('push_disabled',1);
                    console.warn('Не удалось получить разрешение на показ уведомлений.', err);
                });
        }

        function webpush_unsubscribe(){
            // получаем ID устройства
            messaging.getToken()
                .then(function (currentToken) {
                    console.log(currentToken);

                    if (currentToken) {
                        messaging.deleteToken(currentToken).then(function() {
                            window.localStorage.setItem('push_disabled',1)
                            console.log('Токен удален');
                            setTokenSentToServer(false);
                            // [START_EXCLUDE]
                            // Once token is deleted update UI.
                            var url = '/ajax/webpush-delete-token.php';
                            $.post(url, {
                                token: currentToken
                            });
                            $('#subscribe-web-push').css('display','block')
                            $('#unsubscribe-web-push').css('display','none')
                            //window.localStorage.removeItem('sentFirebaseMessagingToken')
                            // [END_EXCLUDE]
                        }).catch(function(err) {
                            console.log('Невозможно удалить токен. ', err);
                        });
                        // [END delete_token]
                    } else {
                        console.warn('Не удалось получить токен.');
                        setTokenSentToServer(false);
                    }
                })
                .catch(function (err) {
                    console.warn('При получении токена произошла ошибка.', err);
                    setTokenSentToServer(false);
                });
        }

        // отправка ID на сервер
        function sendTokenToServer(currentToken) {
            if (!isTokenSentToServer(currentToken)) {
                console.log('Отправка токена на сервер...');

                var url = '/ajax/webpush-save-token.php'; // адрес скрипта на сервере который сохраняет ID устройства
                $.ajax({
                    url: url,
                    data: {
                        token: currentToken
                    },
                    type: "POST",
                    dataType: "text",
                    success: function (data, textStatus, XHR) {
                        if(typeof(data) !== 'undefined' && data.length>2){
                            setTokenSentToServer(data);
                        }
                    }
                });
            }
            else {
                console.log('Токен уже отправлен на сервер.');
                var url = '/ajax/webpush-save-token.php';
                $.ajax({
                    url: url,
                    data: {
                        token: currentToken,
                        check: 1
                    },
                    type: "POST",
                    dataType: "text",
                    success: function (data, textStatus, XHR) {
                        if(typeof(data) !== 'undefined' && data.length>0){
                            if(data == -1){
                                messaging.getToken().then(function(refreshedToken) {
                                    console.log('Token refreshed.');
                                    // Indicate that the new Instance ID token has not yet been sent to the
                                    // app server.
                                    setTokenSentToServer(false);
                                    // Send Instance ID token to app server.
                                    sendTokenToServer(refreshedToken);
                                    // ...
                                }).catch(function(err) {
                                    console.log('Unable to retrieve refreshed token ', err);
                                    showToken('Unable to retrieve refreshed token ', err);
                                });
                            }
                        }
                    }
                });
            }
        }

        // используем localStorage для отметки того,
        // что пользователь уже подписался на уведомления
        function isTokenSentToServer(currentToken) {
            return window.localStorage.getItem('sentFirebaseMessagingToken') == currentToken;
        }

        function setTokenSentToServer(currentToken) {
            window.localStorage.setItem(
                'sentFirebaseMessagingToken',
                currentToken ? currentToken : ''
            );
        }

        // Callback fired if Instance ID token is updated.
        messaging.onTokenRefresh(function() {
            messaging.getToken().then(function(refreshedToken) {
                console.log('Token refreshed.');
                // Indicate that the new Instance ID token has not yet been sent to the
                // app server.
                setTokenSentToServer(false);
                // Send Instance ID token to app server.
                sendTokenToServer(refreshedToken);
                // ...
            }).catch(function(err) {
                console.log('Unable to retrieve refreshed token ', err);
                showToken('Unable to retrieve refreshed token ', err);
            });
        });

        messaging.onMessage(function(payload) {
            console.log('Message received. ', payload);
            // регистрируем пустой ServiceWorker каждый раз
            navigator.serviceWorker.register('/messaging-sw.js');

            // запрашиваем права на показ уведомлений если еще не получили их
            Notification.requestPermission(function(result) {
                if (result === 'granted') {
                    navigator.serviceWorker.ready.then(function(registration) {
                        if (typeof payload.data.expireTime != 'undefined') {
                            var time = new Date(payload.data.expireTime * 1000);
                            var now = new Date();

                            if (time < now) { // истек срок годности уведомления
                                return null;
                            }
                        }

                        payload.data.data = payload.data; // параметры уведомления
                        var storage = window.localStorage.getItem('webpush');
                        if(typeof(storage) === 'string' && storage.length>0){
                            storage = JSON.parse(storage);
                        }else{
                            storage = {}
                        }
                        if(typeof(storage[payload.data.hash]) === 'undefined'){
                            storage[payload.data.hash] = 1;
                            storage = JSON.stringify(storage);
                            window.localStorage.setItem('webpush',storage)
                            return registration.showNotification(payload.data.title, payload.data);
                        }

                    }).catch(function(error) {
                        console.log('ServiceWorker registration failed', error);
                    });
                }
            });
        });
    })
}else{
    console.warn('This browser does not support desktop notification.');
    console.log('Is HTTPS', window.location.protocol === 'https:');
    console.log('Support Notification', 'Notification' in window);
    console.log('Support ServiceWorker', 'serviceWorker' in navigator);
    console.log('Support LocalStorage', 'localStorage' in window);
    console.log('Support fetch', 'fetch' in window);
    console.log('Support postMessage', 'postMessage' in window);
}